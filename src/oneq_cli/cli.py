# D:\1q\src\oneq_cli\cli.py
import argparse
import sys
import os
import re
import subprocess
import shlex
from pathlib import Path
from typing import Optional, Dict, Any, List, Tuple, Literal

from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.text import Text

from . import config
from . import gemini
from . import tui
from . import history
from .exceptions import (
    ApiKeyNotFound, ConfigurationError, ApiKeySetupCancelled, GeminiApiError, OneQError
)

try:
    import pyperclip
    PYPERCLIP_AVAILABLE = True
except ImportError:
    PYPERCLIP_AVAILABLE = False

try:
    from typing import get_args
except ImportError:
    # Basic fallback for Python < 3.8
    def get_args(tp):
        return getattr(tp, '__args__', ())

console = Console()

def run_command(command: str) -> None:
    """
    Runs a shell command using subprocess.
    """
    try:
        result = subprocess.run(shlex.split(command), capture_output=True, text=True, check=True)
        console.print(result.stdout)
        if result.stderr:
            console.print(f"[yellow]STDERR:[/yellow] {result.stderr}")
    except subprocess.CalledProcessError as e:
        console.print(f"[red]Command failed:[/red] {e}")
        console.print(f"[red]STDERR:[/red] {e.stderr}")
    except FileNotFoundError:
        console.print(f"[red]Command not found:[/red] {command.split()[0]}")
    except Exception as e:
        console.print(f"[red]Error running command:[/red] {e}")

def main() -> None:
    """
    Main entry point for the 1q CLI application.
    """
    parser = argparse.ArgumentParser(description="1Q: Generate and execute shell commands from natural language.")
    parser.add_argument("query", nargs="*", help="Natural language query to convert into a shell command.")
    parser.add_argument("-x", "--execute", action="store_true", help="Execute the generated command directly.")
    parser.add_argument("-c", "--copy", action="store_true", help="Copy the generated command to the clipboard.")
    parser.add_argument("-s", "--style", type=str, choices=["auto", "tui", "inline"],
                        help="Override the output style (auto, tui, inline).", default="auto")
    parser.add_argument("--show-config-path", action="store_true", help="Print the path to the configuration file and exit.")
    parser.add_argument("--clear-config", action="store_true", help="Remove the configuration file (prompts for confirmation).")
    parser.add_argument("--set-default-output", type=str, choices=["auto", "tui", "inline"],
                        help="Set and save the default output style in the config file (auto, tui, inline).")
    parser.add_argument("-v", "--version", action="store_true", help="show program's version number and exit")

    args = parser.parse_args()

    if args.version:
        from oneq_cli._version import __version__
        print(__version__)
        sys.exit(0)

    if args.show_config_path:
        print(config.get_config_file_path())
        sys.exit(0)

    if args.clear_config:
        if Confirm.ask("Are you sure you want to remove the configuration file? This cannot be undone."):
            config.clear_config_file()
        sys.exit(0)

    if args.set_default_output:
        try:
            config.set_output_style(args.set_default_output)
            console.print(f"Default output style set to: {args.set_default_output}", style="green")
        except ValueError as e:
            console.print(f"[red]Error:[/red] {e}", style="red")
        sys.exit(0)

    if not args.query:
        console.print("Please provide a query.", style="yellow")
        sys.exit(1)

    query = " ".join(args.query)

    try:
        api_key = config.get_api_key()
    except ApiKeyNotFound:
        console.print("[yellow]Gemini API key not found.[/yellow]", style="yellow")
        if Confirm.ask("Do you want to set up the API key now?"):
            try:
                api_key = tui.ApiKeyApp.run()
                if api_key:
                    config.save_api_key(api_key)
                    console.print("[green]API key saved successfully![/green]", style="green")
                else:
                    raise ApiKeySetupCancelled("API key setup cancelled.")
            except ApiKeySetupCancelled as e:
                console.print(f"[red]Error:[/red] {e}", style="red")
                sys.exit(1)
        else:
            console.print("[yellow]Please set up the API key to use 1Q.[/yellow]", style="yellow")
            sys.exit(1)
    except ConfigurationError as e:
        console.print(f"[red]Configuration Error:[/red] {e}", style="red")
        sys.exit(1)

    output_style = config.get_output_style()
    if args.style != "auto":
        output_style = args.style

    try:
        response_data = gemini.generate_command(query, api_key)
        command = response_data.get("command", "No command generated.")
        if not command:
             raise GeminiApiError("No command was generated by the AI. Please refine your query.")

        if output_style == "tui":
            from .tui import display_response_tui
            tui_action = display_response_tui(response_data)

            if tui_action == "execute":
                console.print("[bold blue]Executing command...[/bold blue]", style="blue")
                run_command(command)
            elif tui_action == "modify":
                modified_command = Prompt.ask("Enter modified command", default=command)
                console.print("[bold blue]Executing modified command...[/bold blue]", style="blue")
                run_command(modified_command)
            elif tui_action == "refine":
                console.print("[yellow]Refine query feature coming soon![/yellow]", style="yellow") # Placeholder
            elif tui_action == "copy":
                 if PYPERCLIP_AVAILABLE:
                     try:
                         import pyperclip
                         pyperclip.copy(command)
                         console.print("[green]Command copied to clipboard![/green]", style="green")
                     except pyperclip.PyperclipException:
                         console.print("[red]Clipboard access failed. Ensure you have xclip or xsel installed.[/red]", style="red")
                 else:
                     console.print("[red]pyperclip not installed. Please install it to use clipboard functionality.[/red]", style="red")
        elif output_style == "inline":
            console.print(f"[bold blue]Command:[/bold blue] {command}", style="blue")
            if args.execute:
                console.print("[bold blue]Executing command...[/bold blue]", style="blue")
                run_command(command)
            elif args.copy:
                if PYPERCLIP_AVAILABLE:
                    try:
                        import pyperclip
                        pyperclip.copy(command)
                        console.print("[green]Command copied to clipboard![/green]", style="green")
                    except pyperclip.PyperclipException:
                        console.print("[red]Clipboard access failed. Ensure you have xclip or xsel installed.[/red]", style="red")
                else:
                    console.print("[red]pyperclip not installed. Please install it to use clipboard functionality.[/red]", style="red")
        else: # Auto or any other unexpected value defaults to a basic output
            if sys.stdout.isatty(): # TTY (interactive terminal)
                 from .tui import display_response_tui
                 tui_action = display_response_tui(response_data)

                 if tui_action == "execute":
                     console.print("[bold blue]Executing command...[/bold blue]", style="blue")
                     run_command(command)
                 elif tui_action == "modify":
                     modified_command = Prompt.ask("Enter modified command", default=command)
                     console.print("[bold blue]Executing modified command...[/bold blue]", style="blue")
                     run_command(modified_command)
                 elif tui_action == "refine":
                     console.print("[yellow]Refine query feature coming soon![/yellow]", style="yellow")  # Placeholder
                 elif tui_action == "copy":
                     if PYPERCLIP_AVAILABLE:
                         try:
                             import pyperclip
                             pyperclip.copy(command)
                             console.print("[green]Command copied to clipboard![/green]", style="green")
                         except pyperclip.PyperclipException:
                             console.print("[red]Clipboard access failed. Ensure you have xclip or xsel installed.[/red]", style="red")
                     else:
                         console.print("[red]pyperclip not installed. Please install it to use clipboard functionality.[/red]", style="red")
            else: # Redirected output (e.g., to a file)
                console.print(command)
                if args.execute:
                    run_command(command) # Consider implications for non-interactive execution

        history.save_history(query, command)


    except ApiKeyNotFound:
        console.print("[red]API Key not found. Please configure it using --set-api-key or set the GEMINI_API_KEY environment variable.[/red]", style="red")
        sys.exit(1)
    except GeminiApiError as e:
        console.print(f"[red]Gemini API Error:[/red] {e}", style="red")
        sys.exit(1)
    except ConfigurationError as e:
        console.print(f"[red]Configuration Error:[/red] {e}", style="red")
        sys.exit(1)
    except OneQError as e:
         console.print(f"[red]1Q Error:[/red] {e}", style="red")
         sys.exit(1)
    except Exception as e:
        console.print(f"[red]An unexpected error occurred:[/red] {e}", style="red")
        console.print_exception()
        sys.exit(1)


if __name__ == "__main__":
    project_root = Path(__file__).resolve().parent.parent.parent
    src_path = project_root / 'src'
    if str(src_path) not in sys.path:
        sys.path.insert(0, str(src_path))

    try:
        import oneq_cli.config as cfg
        config = cfg
        import oneq_cli.gemini as gem
        gemini = gem
        import oneq_cli.tui as tui_mod
        tui = tui_mod
        import oneq_cli.history as history_mod
        history = history_mod
        from oneq_cli.exceptions import ApiKeyNotFound, ConfigurationError, ApiKeySetupCancelled, GeminiApiError, OneQError
    except ImportError as e:
        print(f"Error: Could not import local modules from src/: {e}", file=sys.stderr)
        print("Ensure script is run from the project root or the project is installed.", file=sys.stderr)
        sys.exit(1)

    main()